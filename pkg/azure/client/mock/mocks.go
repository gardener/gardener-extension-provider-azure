// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-azure/pkg/azure/client (interfaces: DNSZone,DNSRecordSet,Group,Subnet,Factory)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2020-05-01/network"
	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-05-01/resources"
	client "github.com/gardener/gardener-extension-provider-azure/pkg/azure/client"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockDNSZone is a mock of DNSZone interface.
type MockDNSZone struct {
	ctrl     *gomock.Controller
	recorder *MockDNSZoneMockRecorder
}

// MockDNSZoneMockRecorder is the mock recorder for MockDNSZone.
type MockDNSZoneMockRecorder struct {
	mock *MockDNSZone
}

// NewMockDNSZone creates a new mock instance.
func NewMockDNSZone(ctrl *gomock.Controller) *MockDNSZone {
	mock := &MockDNSZone{ctrl: ctrl}
	mock.recorder = &MockDNSZoneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSZone) EXPECT() *MockDNSZoneMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockDNSZone) GetAll(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDNSZoneMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDNSZone)(nil).GetAll), arg0)
}

// MockDNSRecordSet is a mock of DNSRecordSet interface.
type MockDNSRecordSet struct {
	ctrl     *gomock.Controller
	recorder *MockDNSRecordSetMockRecorder
}

// MockDNSRecordSetMockRecorder is the mock recorder for MockDNSRecordSet.
type MockDNSRecordSetMockRecorder struct {
	mock *MockDNSRecordSet
}

// NewMockDNSRecordSet creates a new mock instance.
func NewMockDNSRecordSet(ctrl *gomock.Controller) *MockDNSRecordSet {
	mock := &MockDNSRecordSet{ctrl: ctrl}
	mock.recorder = &MockDNSRecordSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSRecordSet) EXPECT() *MockDNSRecordSetMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockDNSRecordSet) CreateOrUpdate(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string, arg5 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockDNSRecordSetMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDNSRecordSet)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method.
func (m *MockDNSRecordSet) Delete(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDNSRecordSetMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDNSRecordSet)(nil).Delete), arg0, arg1, arg2, arg3)
}

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockGroup) CreateOrUpdate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockGroupMockRecorder) CreateOrUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGroup)(nil).CreateOrUpdate), arg0, arg1, arg2)
}

// DeleteIfExits mocks base method.
func (m *MockGroup) DeleteIfExits(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIfExits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIfExits indicates an expected call of DeleteIfExits.
func (mr *MockGroupMockRecorder) DeleteIfExits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIfExits", reflect.TypeOf((*MockGroup)(nil).DeleteIfExits), arg0, arg1)
}

// Get mocks base method.
func (m *MockGroup) Get(arg0 context.Context, arg1 string) (*resources.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*resources.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroup)(nil).Get), arg0, arg1)
}

// MockSubnet is a mock of Subnet interface.
type MockSubnet struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetMockRecorder
}

// MockSubnetMockRecorder is the mock recorder for MockSubnet.
type MockSubnetMockRecorder struct {
	mock *MockSubnet
}

// NewMockSubnet creates a new mock instance.
func NewMockSubnet(ctrl *gomock.Controller) *MockSubnet {
	mock := &MockSubnet{ctrl: ctrl}
	mock.recorder = &MockSubnetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnet) EXPECT() *MockSubnetMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSubnet) Delete(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubnetMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubnet)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockSubnet) Get(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubnetMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubnet)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// List mocks base method.
func (m *MockSubnet) List(arg0 context.Context, arg1, arg2 string) ([]network.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]network.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubnetMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubnet)(nil).List), arg0, arg1, arg2)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// DNSRecordSet mocks base method.
func (m *MockFactory) DNSRecordSet(arg0 context.Context, arg1 v1.SecretReference) (client.DNSRecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSRecordSet", arg0, arg1)
	ret0, _ := ret[0].(client.DNSRecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DNSRecordSet indicates an expected call of DNSRecordSet.
func (mr *MockFactoryMockRecorder) DNSRecordSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSRecordSet", reflect.TypeOf((*MockFactory)(nil).DNSRecordSet), arg0, arg1)
}

// DNSZone mocks base method.
func (m *MockFactory) DNSZone(arg0 context.Context, arg1 v1.SecretReference) (client.DNSZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DNSZone", arg0, arg1)
	ret0, _ := ret[0].(client.DNSZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DNSZone indicates an expected call of DNSZone.
func (mr *MockFactoryMockRecorder) DNSZone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNSZone", reflect.TypeOf((*MockFactory)(nil).DNSZone), arg0, arg1)
}

// Disk mocks base method.
func (m *MockFactory) Disk(arg0 context.Context, arg1 v1.SecretReference) (client.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disk", arg0, arg1)
	ret0, _ := ret[0].(client.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disk indicates an expected call of Disk.
func (mr *MockFactoryMockRecorder) Disk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disk", reflect.TypeOf((*MockFactory)(nil).Disk), arg0, arg1)
}

// Group mocks base method.
func (m *MockFactory) Group(arg0 context.Context, arg1 v1.SecretReference) (client.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0, arg1)
	ret0, _ := ret[0].(client.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Group indicates an expected call of Group.
func (mr *MockFactoryMockRecorder) Group(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockFactory)(nil).Group), arg0, arg1)
}

// NetworkInterface mocks base method.
func (m *MockFactory) NetworkInterface(arg0 context.Context, arg1 v1.SecretReference) (client.NetworkInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInterface", arg0, arg1)
	ret0, _ := ret[0].(client.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInterface indicates an expected call of NetworkInterface.
func (mr *MockFactoryMockRecorder) NetworkInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInterface", reflect.TypeOf((*MockFactory)(nil).NetworkInterface), arg0, arg1)
}

// NetworkSecurityGroup mocks base method.
func (m *MockFactory) NetworkSecurityGroup(arg0 context.Context, arg1 v1.SecretReference) (client.NetworkSecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkSecurityGroup", arg0, arg1)
	ret0, _ := ret[0].(client.NetworkSecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkSecurityGroup indicates an expected call of NetworkSecurityGroup.
func (mr *MockFactoryMockRecorder) NetworkSecurityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkSecurityGroup", reflect.TypeOf((*MockFactory)(nil).NetworkSecurityGroup), arg0, arg1)
}

// PublicIP mocks base method.
func (m *MockFactory) PublicIP(arg0 context.Context, arg1 v1.SecretReference) (client.PublicIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicIP", arg0, arg1)
	ret0, _ := ret[0].(client.PublicIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicIP indicates an expected call of PublicIP.
func (mr *MockFactoryMockRecorder) PublicIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicIP", reflect.TypeOf((*MockFactory)(nil).PublicIP), arg0, arg1)
}

// Storage mocks base method.
func (m *MockFactory) Storage(arg0 context.Context, arg1 v1.SecretReference) (client.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage", arg0, arg1)
	ret0, _ := ret[0].(client.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Storage indicates an expected call of Storage.
func (mr *MockFactoryMockRecorder) Storage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockFactory)(nil).Storage), arg0, arg1)
}

// StorageAccount mocks base method.
func (m *MockFactory) StorageAccount(arg0 context.Context, arg1 v1.SecretReference) (client.StorageAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAccount", arg0, arg1)
	ret0, _ := ret[0].(client.StorageAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageAccount indicates an expected call of StorageAccount.
func (mr *MockFactoryMockRecorder) StorageAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAccount", reflect.TypeOf((*MockFactory)(nil).StorageAccount), arg0, arg1)
}

// Subnet mocks base method.
func (m *MockFactory) Subnet(arg0 context.Context, arg1 v1.SecretReference) (client.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subnet", arg0, arg1)
	ret0, _ := ret[0].(client.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subnet indicates an expected call of Subnet.
func (mr *MockFactoryMockRecorder) Subnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnet", reflect.TypeOf((*MockFactory)(nil).Subnet), arg0, arg1)
}

// VirtualMachine mocks base method.
func (m *MockFactory) VirtualMachine(arg0 context.Context, arg1 v1.SecretReference) (client.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(client.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachine indicates an expected call of VirtualMachine.
func (mr *MockFactoryMockRecorder) VirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachine", reflect.TypeOf((*MockFactory)(nil).VirtualMachine), arg0, arg1)
}

// VirtualMachineImage mocks base method.
func (m *MockFactory) VirtualMachineImage(arg0 context.Context, arg1 v1.SecretReference) (client.VirtualMachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineImage", arg0, arg1)
	ret0, _ := ret[0].(client.VirtualMachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachineImage indicates an expected call of VirtualMachineImage.
func (mr *MockFactoryMockRecorder) VirtualMachineImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineImage", reflect.TypeOf((*MockFactory)(nil).VirtualMachineImage), arg0, arg1)
}

// Vmss mocks base method.
func (m *MockFactory) Vmss(arg0 context.Context, arg1 v1.SecretReference) (client.Vmss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vmss", arg0, arg1)
	ret0, _ := ret[0].(client.Vmss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vmss indicates an expected call of Vmss.
func (mr *MockFactoryMockRecorder) Vmss(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vmss", reflect.TypeOf((*MockFactory)(nil).Vmss), arg0, arg1)
}
