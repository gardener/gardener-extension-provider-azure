// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-azure/pkg/azure/client (interfaces: Vmss)
//
// Generated by this command:
//
//	mockgen -package vmss -destination=mocks.go github.com/gardener/gardener-extension-provider-azure/pkg/azure/client Vmss
//

// Package vmss is a generated GoMock package.
package vmss

import (
	context "context"
	reflect "reflect"

	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v7"
	gomock "go.uber.org/mock/gomock"
)

// MockVmss is a mock of Vmss interface.
type MockVmss struct {
	ctrl     *gomock.Controller
	recorder *MockVmssMockRecorder
	isgomock struct{}
}

// MockVmssMockRecorder is the mock recorder for MockVmss.
type MockVmssMockRecorder struct {
	mock *MockVmss
}

// NewMockVmss creates a new mock instance.
func NewMockVmss(ctrl *gomock.Controller) *MockVmss {
	mock := &MockVmss{ctrl: ctrl}
	mock.recorder = &MockVmssMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVmss) EXPECT() *MockVmssMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockVmss) CreateOrUpdate(ctx context.Context, resourceGroupName, resourceName string, resourceParam armcompute.VirtualMachineScaleSet) (*armcompute.VirtualMachineScaleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, resourceName, resourceParam)
	ret0, _ := ret[0].(*armcompute.VirtualMachineScaleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVmssMockRecorder) CreateOrUpdate(ctx, resourceGroupName, resourceName, resourceParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVmss)(nil).CreateOrUpdate), ctx, resourceGroupName, resourceName, resourceParam)
}

// Delete mocks base method.
func (m *MockVmss) Delete(ctx context.Context, resourceGroupName, resourceName string, opts *bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, resourceName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVmssMockRecorder) Delete(ctx, resourceGroupName, resourceName, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVmss)(nil).Delete), ctx, resourceGroupName, resourceName, opts)
}

// Get mocks base method.
func (m *MockVmss) Get(ctx context.Context, resourceGroupName, resourceName string, expand *armcompute.ExpandTypesForGetVMScaleSets) (*armcompute.VirtualMachineScaleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, resourceName, expand)
	ret0, _ := ret[0].(*armcompute.VirtualMachineScaleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVmssMockRecorder) Get(ctx, resourceGroupName, resourceName, expand any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVmss)(nil).Get), ctx, resourceGroupName, resourceName, expand)
}

// List mocks base method.
func (m *MockVmss) List(ctx context.Context, resourceGroupName string) ([]*armcompute.VirtualMachineScaleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, resourceGroupName)
	ret0, _ := ret[0].([]*armcompute.VirtualMachineScaleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVmssMockRecorder) List(ctx, resourceGroupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVmss)(nil).List), ctx, resourceGroupName)
}
